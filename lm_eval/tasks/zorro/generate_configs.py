import yaml

all_subtasks = ['npi_licensing-only_npi_licensor', 'agreement_subject_verb-across_relative_clause',
                'quantifiers-existential_there', 'filler-gap-wh_question_object', 'filler-gap-wh_question_subject',
                'argument_structure-dropped_argument', 'ellipsis-n_bar', 'npi_licensing-matrix_question',
                'anaphor_agreement-pronoun_gender', 'irregular-verb', 'agreement_determiner_noun-between_neighbors',
                'local_attractor-in_question_with_aux', 'island-effects-adjunct_island',
                'agreement_subject_verb-in_simple_question', 'argument_structure-transitive',
                'agreement_subject_verb-in_question_with_aux', 'case-subjective_pronoun', 'quantifiers-superlative',
                'agreement_determiner_noun-across_1_adjective', 'agreement_subject_verb-across_prepositional_phrase',
                'binding-principle_a', 'island-effects-coordinate_structure_constraint',
                'argument_structure-swapped_arguments']


def main() -> None:
    for task in all_subtasks:
        file_name = f"{task}.yaml"
        try:
            with open(f"{file_name}", "w", encoding="utf-8") as f:
                f.write("# Generated by utils.py\n")
                yaml.dump(
                    {
                        "include": "_template_yaml",
                        "task": "zorro_" + task,
                        "dataset_kwargs": {"data_files": f"evaluation_data/zorro/{task}.jsonl"}
                    },
                    f,
                )
        except FileExistsError:
            pass


if __name__ == "__main__":
    main()
